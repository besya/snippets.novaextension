[
    {
        "name": "Comment Block",
        "trigger": "/",
        "content": "/*$1 */"
    },
    {
        "name": "Multiline Comment",
        "trigger": "//",
        "content": "/*$1\n */"
    },
    {
        "name": "Starter Template",
        "trigger": "st",
        "content": "#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{$1\n\treturn EXIT_SUCCESS;\n}"
    },
    {
        "name": "Preprocessor Starter Template",
        "trigger": "#st",
        "content": "#include <assert.h>\n#include <errno.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>"
    },
    {
        "name": "Main() Template",
        "trigger": "main",
        "content": "int main(int argc, char *argv[])\n{$1\n\treturn EXIT_SUCCESS;\n}"
    },
    {
        "name": "Main(Void) Template",
        "trigger": "mainn",
        "content": "int main(void)\n{$1\n\treturn EXIT_SUCCESS;\n}"
    },
    {
        "name": "#Include <...>",
        "trigger": "#inc",
        "content": "#include <$1>"
    },
    {
        "name": "#Include \"...\"",
        "trigger": "#incl",
        "content": "#include \"$1\""
    },
    {
        "name": "#Define Macro",
        "trigger": "#def",
        "content": "#define ${1:MACRO}"
    },
    {
        "name": "#Define Macro()",
        "trigger": "#deff",
        "content": "#define ${1:MACRO}($2) ($3)"
    },
    {
        "name": "_Gnu_Source",
        "trigger": "#gnu",
        "content": "#define _GNU_SOURCE"
    },
    {
        "name": "#If",
        "trigger": "#if",
        "content": "#if ${1:0}\n$2\n#endif /* if $1 */"
    },
    {
        "name": "#Ifdef",
        "trigger": "#ifdef",
        "content": "#ifdef ${1:MACRO}\n$2\n#endif /* ifdef $1 */"
    },
    {
        "name": "#Ifndef",
        "trigger": "#ifndef",
        "content": "#ifndef ${1:MACRO}\n$2\n#endif /* ifndef $1 */"
    },
    {
        "name": "Include Once",
        "trigger": "#once",
        "content": "#ifndef ${1:FILE}_H\n#define $1_H\n$2\n\n#endif /* end of include guard: $1_H */"
    },
    {
        "name": "Extern C",
        "trigger": "#nocpp",
        "content": "#ifdef __cplusplus\nextern \"C\" {\n#endif\n$1\n\n#ifdef __cplusplus\n} /* extern \"C\" */\n#endif"
    },
    {
        "name": "#Error",
        "trigger": "#err",
        "content": "#error \"$1\""
    },
    {
        "name": "#Warning",
        "trigger": "#warn",
        "content": "#warning \"$1\""
    },
    {
        "name": "If",
        "trigger": "if",
        "content": "if (${1:true}) {$2\n}"
    },
    {
        "name": "If Else",
        "trigger": "ifelse",
        "content": "if (${1:true}) {$2\n} else {$3\n}"
    },
    {
        "name": "Else",
        "trigger": "else",
        "content": "else {$1\n}"
    },
    {
        "name": "Else If",
        "trigger": "elseif",
        "content": "else if (${1:true}) {$2\n}"
    },
    {
        "name": "If 1L",
        "trigger": "ifi",
        "content": "if (${1:true})$2"
    },
    {
        "name": "Elif 1L",
        "trigger": "elseifi",
        "content": "else if (${1:true})$2"
    },
    {
        "name": "Switch",
        "trigger": "switch",
        "content": "switch (${1:expression}) {$2\n}"
    },
    {
        "name": "Case",
        "trigger": "case",
        "content": "case ${1:0}:$2"
    },
    {
        "name": "Default",
        "trigger": "default",
        "content": "default:$1"
    },
    {
        "name": "While",
        "trigger": "while",
        "content": "while (${1:true}) {$2\n}"
    },
    {
        "name": "Do...While",
        "trigger": "do",
        "content": "do {$2\n} while (${1:false});"
    },
    {
        "name": "Return",
        "trigger": "return",
        "content": "return ${1:0};"
    },
    {
        "name": "Exit",
        "trigger": "exit",
        "content": "exit(${1:EXIT_FAILURE});"
    },
    {
        "name": "For",
        "trigger": "for",
        "content": "for ($1;$2;$3) {$4\n}"
    },
    {
        "name": "For Count",
        "trigger": "forc",
        "content": "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:count}; $2${5:++}) {$6\n}"
    },
    {
        "name": "For Range",
        "trigger": "forg",
        "content": "for (${1:size_t} ${2:i} = ${3:1}; $2 <= ${4:last}; $2${5:++}) {$6\n}"
    },
    {
        "name": "For Argv[]",
        "trigger": "fora",
        "content": "for (int ${1:i} = ${2:1}; $1 < argc; $1++) {$3\n}"
    },
    {
        "name": "Function ...",
        "trigger": "fun",
        "content": "${2:void} ${1:fun}(${3:void})$4"
    },
    {
        "name": "Function Definition",
        "trigger": "func",
        "content": "${2:void} ${1:fun}(${3:void})\n{$4\n}"
    },
    {
        "name": "Typedef",
        "trigger": "typedef",
        "content": "typedef ${1:void} ${2:Emptiness};"
    },
    {
        "name": "Complicated Typedef",
        "trigger": "typedeff",
        "content": "typedef $1;"
    },
    {
        "name": "Typedef Struct",
        "trigger": "typedefst",
        "content": "typedef struct $1 ${1:Box};"
    },
    {
        "name": "Typedef Union",
        "trigger": "typedefun",
        "content": "typedef union $1 ${1:Cell};"
    },
    {
        "name": "Struct",
        "trigger": "struct",
        "content": "struct ${1:MyStruct} {$2\n};"
    },
    {
        "name": "Struct Type",
        "trigger": "typestruct",
        "content": "typedef struct $1 ${1:Box};\nstruct $1 {$2\n};"
    },
    {
        "name": "Union",
        "trigger": "union",
        "content": "union ${1:MyUnion} {$2\n};"
    },
    {
        "name": "Union Type",
        "trigger": "typeunion",
        "content": "typedef union $1 ${1:Cell};\nunion $1 {$2\n};"
    },
    {
        "name": "Enum",
        "trigger": "enum",
        "content": "enum $1{ $2 };"
    },
    {
        "name": "Puts",
        "trigger": "puts",
        "content": "puts(\"${1:This function doesn't need newline.}\")$2"
    },
    {
        "name": "Fputs",
        "trigger": "fputs",
        "content": "fputs(\"${2:This is a simpler printf.\\n}\", ${1:stdout})$3"
    },
    {
        "name": "Printf",
        "trigger": "printf",
        "content": "printf(\"${1:%s}\\n\"$2)$3"
    },
    {
        "name": "Fprintf",
        "trigger": "fprintf",
        "content": "fprintf(${1:stderr}, \"${2:%s}\\n\"$3)$4"
    },
    {
        "name": "Sprintf",
        "trigger": "sprintf",
        "content": "sprintf(${1:buf}, \"${2:%s}\\n\"$3)$4"
    },
    {
        "name": "Snprintf",
        "trigger": "snprintf",
        "content": "snprintf(${1:buf}, ${2:max}, \"${3:%s}\\n\"$3)$4"
    },
    {
        "name": "Scanf",
        "trigger": "scanf",
        "content": "scanf(\"${1:%d}\"$2)$3"
    },
    {
        "name": "Fscanf",
        "trigger": "fscanf",
        "content": "fscanf(${1:stdin}, \"${2:%d}\"$3)$4"
    },
    {
        "name": "Sscanf",
        "trigger": "sscanf",
        "content": "sscanf(${1:buf}, \"${2:%d}\"$3)$4"
    },
    {
        "name": "Malloc",
        "trigger": "malloc",
        "content": "malloc(sizeof(${1:int[69]})$2)$3"
    },
    {
        "name": "Calloc",
        "trigger": "calloc",
        "content": "calloc(${1:1}, sizeof(${2:int})$3)$4"
    },
    {
        "name": "Realloc",
        "trigger": "realloc",
        "content": "realloc(${1:ptr}, sizeof(${2:int[69]})$3)$4"
    },
    {
        "name": "Reallocarray",
        "trigger": "reallocarray",
        "content": "reallocarray(${1:ptr}, ${2:69}, sizeof(${3:int})$4)$5"
    },
    {
        "name": "Free",
        "trigger": "free",
        "content": "free(${1:NULL});"
    },
    {
        "name": "Assert",
        "trigger": "assert",
        "content": "assert($1);"
    },
    {
        "name": "Static_Assert",
        "trigger": "static_assert",
        "content": "static_assert(${1:false}, \"${2:Oopsie}\");"
    },
    {
        "name": "Err",
        "trigger": "err",
        "content": "err(${1:EXIT_FAILURE}, \"${2:%s}\"$3);"
    },
    {
        "name": "Errx",
        "trigger": "errx",
        "content": "errx(${1:EXIT_FAILURE}, \"${2:%s}\"$3);"
    },
    {
        "name": "Warn",
        "trigger": "warn",
        "content": "warn(\"${1:%s}\"$2);"
    },
    {
        "name": "Warnx",
        "trigger": "warnx",
        "content": "warnx(\"${1:%s}\"$2);"
    },
    {
        "name": "Fputs() Errcheck",
        "trigger": "chkio_eof",
        "content": "if (${1:status} == EOF$2) {\n\t${3:err(EXIT_FAILURE, \"IO is hard\");}\n}"
    },
    {
        "name": "Fgets() Errcheck",
        "trigger": "chkio_null",
        "content": "if (!${1:status}) {\n\t${2:err(EXIT_FAILURE, \"IO is very hard\");}\n}"
    },
    {
        "name": "Fseek() Errcheck",
        "trigger": "chkio_mi",
        "content": "if (${1:status} == -1$2) {\n\t${3:err(EXIT_FAILURE, \"IO is super hard\");}\n}"
    },
    {
        "name": "Printf() Errcheck",
        "trigger": "chkio_neg",
        "content": "if (${1:status} < 0$2) {\n\t${3:err(EXIT_FAILURE, \"Ran out of ink\");}\n}"
    },
    {
        "name": "Malloc() Errcheck",
        "trigger": "chkmem",
        "content": "if (!${1:status}) {\n\t${2:err(EXIT_FAILURE, \"Your memory is doomed\");}\n}"
    },
    {
        "name": "Print A Variable",
        "trigger": "printv",
        "content": "printf(\"$1 = %${2:d}\\n\", ${1:var}$3);"
    },
    {
        "name": "Array Length",
        "trigger": "arrlen",
        "content": "(sizeof ${1:arr} / sizeof $1[0])"
    }
]
