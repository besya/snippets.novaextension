[
    {
        "name": "Main",
        "trigger": "main",
        "content": "public static void main(String[] args) {\n\t$1\n}"
    },
    {
        "name": "Class",
        "trigger": "class",
        "content": "public class ${TM_FILENAME_BASE} {\n\t$1\n}"
    },
    {
        "name": "Sysout",
        "trigger": "sysout",
        "content": "System.out.println($1);"
    },
    {
        "name": "Syserr",
        "trigger": "syserr",
        "content": "System.err.println($1);"
    },
    {
        "name": "Fori",
        "trigger": "fori",
        "content": "for (${1:int} ${2:i} = ${3:0}; $2 < ${4:max}; $2++) {\n\t$5\n}"
    },
    {
        "name": "Foreach",
        "trigger": "foreach",
        "content": "for (${1:type} ${2:var} : ${3:iterable}) {\n\t$4\n}"
    },
    {
        "name": "Public Constructor",
        "trigger": "ctor",
        "content": "public ${1:${TM_FILENAME_BASE}}($2) {\n\t${3:super();}\n}"
    },
    {
        "name": "If",
        "trigger": "if",
        "content": "if (${1:condition}) {\n\t$2\n}"
    },
    {
        "name": "Ifelse",
        "trigger": "ifelse",
        "content": "if (${1:condition}) {\n\t$2\n} else {\n\t$3\n}"
    },
    {
        "name": "Ifnull",
        "trigger": "ifnull",
        "content": "if (${1:condition} == null) {\n\t$2\n}"
    },
    {
        "name": "Ifnotnull",
        "trigger": "ifnotnull",
        "content": "if (${1:condition} != null) {\n\t$2\n}"
    },
    {
        "name": "Trycatch",
        "trigger": "try_catch",
        "content": "try {\n\t$1\n} catch (${2:Exception} ${3:e}) {\n\t$4//${5:TODO}: handle exception\n}"
    },
    {
        "name": "Tryresources",
        "trigger": "try_resources",
        "content": "try ($1) {\n\t$2\n} catch (${3:Exception} ${4:e}) {\n\t$5//${6:TODO}: handle exception\n}"
    },
    {
        "name": "Private_Method",
        "trigger": "private_method",
        "content": "private ${1:void} ${2:name}($3) {\n\t$4\n}"
    },
    {
        "name": "Public Method",
        "trigger": "public_method",
        "content": "public ${1:void} ${2:name}(${3}) {\n\t$4\n}"
    },
    {
        "name": "Private Static Method",
        "trigger": "private_static_method",
        "content": "private static ${1:Type} ${2:name}(${3}) {\n\t$4\n}"
    },
    {
        "name": "Public Static Method",
        "trigger": "public_static_method",
        "content": "public static ${1:void} ${2:name}(${3}) {\n\t$4\n}"
    },
    {
        "name": "Protected Method",
        "trigger": "protected_method",
        "content": "protected ${1:void} ${2:name}(${3}) {\n\t$4\n}"
    },
    {
        "name": "Switch Statement",
        "trigger": "switch",
        "content": "switch (${1:key}) {\n\tcase ${2:value}:\n\t\t$3\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n}"
    },
    {
        "name": "While Statement",
        "trigger": "while",
        "content": "while (${1:condition}) {\n\t$2\n}"
    },
    {
        "name": "Do-While Statement",
        "trigger": "dowhile",
        "content": "do {\n\t$2\n} while (${1:condition});"
    },
    {
        "name": "Newobject",
        "trigger": "new",
        "content": "${1:Object} ${2:foo} = new ${1:Object}();"
    },
    {
        "name": "Public Field",
        "trigger": "public_field",
        "content": "public ${1:String} ${2:name};"
    },
    {
        "name": "Private Field",
        "trigger": "private_field",
        "content": "private ${1:String} ${2:name};"
    },
    {
        "name": "Protected Field",
        "trigger": "protected_field",
        "content": "protected ${1:String} ${2:name};"
    },
    {
        "name": "Package",
        "trigger": "package",
        "content": "package ${1:PackageName}"
    },
    {
        "name": "Import",
        "trigger": "import",
        "content": "import ${1:PackageName}"
    }
]